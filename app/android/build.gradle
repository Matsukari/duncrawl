android {
    namespace "com.leisure.duncraw"
    buildToolsVersion "33.0.2"
    compileSdkVersion 33
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['../assets']
            jniLibs.srcDirs = ['libs']
        }

    }
    packagingOptions {
        // exclude 'META-INF/robovm/ios/robovm.xml'
        // exclude 'META-INF/macos/x64/org/lwjgl/glfw/libglfw.dylib.sha1'
        // exclude 'META-INF/macos/x64/org/lwjgl/glfw/libglfw_async.dylib.sha1'
        // exclude 'META-INF/macos/x64/org/lwjgl/stb/liblwjgl_stb.dylib.sha1'
        // exclude 'META-INF/macos/x64/org/lwjgl/openal/libopenal.dylib.sha1'
        // exclude 'META-INF/macos/x64/org/lwjgl/opengl/liblwjgl_opengl.dylib.sha1'
        // exclude 'META-INF/macos/x64/org/lwjgl/jemalloc/libjemalloc.dylib.sha1' 
        // exclude 'META-INF/macos/arm64/org/lwjgl/glfw/libglfw.dylib.sha1'
        // exclude 'META-INF/macos/arm64/org/lwjgl/jemalloc/libjemalloc.dylib.sha1' 
        exclude 'META-INF/macos/arm32/org/lwjgl/glfw/libglfw.dylib.sha1'
        exclude 'META-INF/macos/arm32/org/lwjgl/jemalloc/libjemalloc.dylib.sha1'
        exclude 'META-INF/macos/arm32/org/lwjgl/stb/liblwjgl_stb.dylib.sha1'
        exclude 'META-INF/macos/arm32/org/lwjgl/liblwjgl.dylib.sha1'
        exclude 'META-INF/macos/arm32/org/lwjgl/opengl/liblwjgl_opengl.dylib.sha1'
        exclude 'META-INF/macos/arm32/org/lwjgl/openal/libopenal.dylib.sha1'
        exclude 'META-INF/macos/arm64/org/lwjgl/glfw/libglfw.dylib.sha1'
        exclude 'META-INF/macos/arm64/org/lwjgl/jemalloc/libjemalloc.dylib.sha1'
        exclude 'META-INF/macos/arm64/org/lwjgl/stb/liblwjgl_stb.dylib.sha1'
        exclude 'META-INF/macos/arm64/org/lwjgl/liblwjgl.dylib.sha1'
        exclude 'META-INF/macos/arm64/org/lwjgl/opengl/liblwjgl_opengl.dylib.sha1'
        exclude 'META-INF/macos/arm64/org/lwjgl/openal/libopenal.dylib.sha1'
        exclude 'META-INF/macos/arm64/org/lwjgl/glfw/libglfw_async.dylib.sha1'
        exclude 'META-INF/macos/x64/org/lwjgl/glfw/libglfw.dylib.sha1'
        exclude 'META-INF/macos/x64/org/lwjgl/jemalloc/libjemalloc.dylib.sha1'
        exclude 'META-INF/macos/x64/org/lwjgl/stb/liblwjgl_stb.dylib.sha1'
        exclude 'META-INF/macos/x64/org/lwjgl/liblwjgl.dylib.sha1'
        exclude 'META-INF/macos/x64/org/lwjgl/opengl/liblwjgl_opengl.dylib.sha1'
        exclude 'META-INF/macos/x64/org/lwjgl/openal/libopenal.dylib.sha1'
        exclude 'META-INF/macos/x64/org/lwjgl/glfw/libglfw_async.dylib.sha1'

        exclude 'META-INF/linux/arm32/org/lwjgl/glfw/libglfw.so.sha1'
        exclude 'META-INF/linux/arm32/org/lwjgl/jemalloc/libjemalloc.so.sha1'
        exclude 'META-INF/linux/arm32/org/lwjgl/stb/liblwjgl_stb.so.sha1'
        exclude 'META-INF/linux/arm32/org/lwjgl/liblwjgl.so.sha1'
        exclude 'META-INF/linux/arm32/org/lwjgl/opengl/liblwjgl_opengl.so.sha1'
        exclude 'META-INF/linux/arm32/org/lwjgl/openal/libopenal.so.sha1'
        exclude 'META-INF/linux/arm64/org/lwjgl/glfw/libglfw.so.sha1'
        exclude 'META-INF/linux/arm64/org/lwjgl/jemalloc/libjemalloc.so.sha1'
        exclude 'META-INF/linux/arm64/org/lwjgl/stb/liblwjgl_stb.so.sha1'
        exclude 'META-INF/linux/arm64/org/lwjgl/liblwjgl.so.sha1'
        exclude 'META-INF/linux/arm64/org/lwjgl/opengl/liblwjgl_opengl.so.sha1'
        exclude 'META-INF/linux/arm64/org/lwjgl/openal/libopenal.so.sha1'
        exclude 'META-INF/linux/x64/org/lwjgl/glfw/libglfw.so.sha1'
        exclude 'META-INF/linux/x64/org/lwjgl/jemalloc/libjemalloc.so.sha1'
        exclude 'META-INF/linux/x64/org/lwjgl/stb/liblwjgl_stb.so.sha1'
        exclude 'META-INF/linux/x64/org/lwjgl/liblwjgl.so.sha1'
        exclude 'META-INF/linux/x64/org/lwjgl/opengl/liblwjgl_opengl.so.sha1'
        exclude 'META-INF/linux/x64/org/lwjgl/openal/libopenal.so.sha1'

        // exclude 'META-INF/windows/x64/org/lwjgl/jemalloc/jemalloc.dll.sha1'
        // exclude 'META-INF/windows/x64/org/lwjgl/stb/lwjgl_stb.dll.sha1'
        // exclude 'META-INF/windows/x86/org/lwjgl/stb/lwjgl_stb.dll.sha1'
        // exclude 'META-INF/windows/x86/org/lwjgl/lwjgl.dll.sha1'
        exclude 'META-INF/windows/arm32/org/lwjgl/glfw/glfw.dll.sha1'
        exclude 'META-INF/windows/arm32/org/lwjgl/jemalloc/jemalloc.dll.sha1'
        exclude 'META-INF/windows/arm32/org/lwjgl/stb/lwjgl_stb.dll.sha1'
        exclude 'META-INF/windows/arm32/org/lwjgl/lwjgl.dll.sha1'
        exclude 'META-INF/windows/arm32/org/lwjgl/opengl/lwjgl_opengl.dll.sha1'
        exclude 'META-INF/windows/arm32/org/lwjgl/openal/openal.dll.sha1'
        exclude 'META-INF/windows/arm64/org/lwjgl/glfw/glfw.dll.sha1'
        exclude 'META-INF/windows/arm64/org/lwjgl/jemalloc/jemalloc.dll.sha1'
        exclude 'META-INF/windows/arm64/org/lwjgl/stb/lwjgl_stb.dll.sha1'
        exclude 'META-INF/windows/arm64/org/lwjgl/lwjgl.dll.sha1'
        exclude 'META-INF/windows/arm64/org/lwjgl/opengl/lwjgl_opengl.dll.sha1'
        exclude 'META-INF/windows/arm64/org/lwjgl/openal/openal.dll.sha1'
        exclude 'META-INF/windows/x64/org/lwjgl/glfw/glfw.dll.sha1'
        exclude 'META-INF/windows/x64/org/lwjgl/jemalloc/jemalloc.dll.sha1'
        exclude 'META-INF/windows/x64/org/lwjgl/stb/lwjgl_stb.dll.sha1'
        exclude 'META-INF/windows/x64/org/lwjgl/lwjgl.dll.sha1'
        exclude 'META-INF/windows/x64/org/lwjgl/opengl/lwjgl_opengl.dll.sha1'
        exclude 'META-INF/windows/x64/org/lwjgl/openal/OpenAL.dll.sha1'
        exclude 'META-INF/windows/x86/org/lwjgl/glfw/glfw.dll.sha1'
        exclude 'META-INF/windows/x86/org/lwjgl/jemalloc/jemalloc.dll.sha1'
        exclude 'META-INF/windows/x86/org/lwjgl/stb/lwjgl_stb.dll.sha1'
        exclude 'META-INF/windows/x86/org/lwjgl/lwjgl.dll.sha1'
        exclude 'META-INF/windows/x86/org/lwjgl/opengl/lwjgl_opengl.dll.sha1'
        exclude 'META-INF/windows/x86/org/lwjgl/openal/OpenAL.dll.sha1'
        exclude 'META-INF/INDEX.LIST'
    }
    defaultConfig {
        applicationId "com.leisure.duncraw"
        minSdkVersion 14
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        release {
            storeFile file("../../signed.jks")
            storePassword "*963.*963."
            keyAlias "key"
            keyPassword "*963.*963."
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
    doFirst {
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
    packageTask.dependsOn 'copyAndroidNatives'
}

tasks.register('run', Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.leisure.duncraw/com.leisure.duncraw.AndroidLauncher'
}

